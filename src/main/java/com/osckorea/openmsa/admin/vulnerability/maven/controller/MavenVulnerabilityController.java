package com.osckorea.openmsa.admin.vulnerability.maven.controller;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.osckorea.openmsa.admin.vulnerability.maven.dto.MavenVulnerabilityDetailDto;
import com.osckorea.openmsa.admin.vulnerability.maven.dto.MavenVulnerabilityHeaderDto;
import com.osckorea.openmsa.admin.vulnerability.maven.service.MavenVulnerabilityService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

@Tag(name = "저장된 Component들의 취약점 정보 API")
@RestController
@RequestMapping("v1")
@RequiredArgsConstructor
public class MavenVulnerabilityController {
    private final MavenVulnerabilityService mavenVulnerabilityReportService;

    @Operation(summary = "Maven 형태 저장소의 모든 취약점 요약 정보를 호출합니다.")
    @GetMapping("vulnerability/maven/headers")
    public MavenVulnerabilityHeaderDto[] findAllMavenVulnerabilityReportHeader() {
        return this.mavenVulnerabilityReportService.getAllMavenVulnerabilityReportHeader();
    }

    @Operation(summary = "Maven 형태 저장소의 모든 취약점 상세 정보를 호출합니다.")
    @GetMapping("vulnerability/maven/details")
    public MavenVulnerabilityDetailDto[] findAllMavenVulnerabilityReportDetail() {
        return this.mavenVulnerabilityReportService.getAllMavenVulnerabilityReportDetail();
    }

    @Operation(summary = "Maven 형태 저장소의 특정 Component에 대한 취약점 요약 정보를 호출합니다.")
    @GetMapping(value = "vulnerability/maven/header", params = "componentPackageUrl")
    public MavenVulnerabilityHeaderDto findMavenVulnerabilityReportHeader(@RequestParam("componentPackageUrl") String componentPackageUrl) {
        return this.mavenVulnerabilityReportService.getMavenVulnerabilityReportHeader(componentPackageUrl);
    }

    @Operation(summary = "Maven 형태 저장소의 특정 Component에 대한 취약점 상세 정보를 호출합니다.")
    @GetMapping(value = "vulnerability/maven/detail", params = {"packageUrl", "reportId"})
    public MavenVulnerabilityDetailDto findMavenVulnerabilityReportDetail(
        @RequestParam("packageUrl") String componentPackageUrl,
        @RequestParam("reportId") String id
    ) {
        return this.mavenVulnerabilityReportService.getMavenVulnerabilityReportDetail(componentPackageUrl, id);
    }

    @Operation(summary = "Maven 형태 저장소의 특정 Component에 대한 취약점 요약 정보를 삭제합니다.")
    @DeleteMapping(value = "vulnerability/maven/header", params = "componentPackageUrl")
    public void deleteMavenVulnerabilityReportHeader(@RequestParam("componentPackageUrl") String componentPackageUrl) {
        this.mavenVulnerabilityReportService.deleteMavenVulnerabilityReportHeader(componentPackageUrl);
    }

    @Operation(summary = "Maven 형태 저장소의 특정 Component에 대한 취약점 상세 정보를 삭제합니다.")
    @DeleteMapping(value = "vulnerability/maven/detail", params = {"packageUrl", "reportId"})
    public void deleteMavenVulnerabilityReportDetail(
        @RequestParam("packageUrl") String componentPackageUrl,
        @RequestParam("reportId") String id
    ) {
        this.mavenVulnerabilityReportService.deleteMavenVulnerabilityReportDetail(componentPackageUrl, id);
    }
}
