package com.osckorea.openmsa.admin.vulnerability.maven.domain;

import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.domain.Persistable;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Embedded;
import org.springframework.data.relational.core.mapping.Table;
import com.osckorea.openmsa.admin.vulnerability.maven.dto.MavenVulnerabilityDetailDto;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
@Table("maven2_vulnerability_detail")
public class MavenVulnerabilityDetail implements Persistable<MavenVulnerabilityDetailPrimaryKey>{
    @Embedded.Nullable
    private MavenVulnerabilityDetailPrimaryKey primaryKey;

    @Column("display_name")
    private String displayName;

    @Column("title")
    private String title;
    
    @Column("description")
    private String descripton;

    @Column("cvss_score")
    private Float cvssScore;

    @Column("cvss_vector")
    private String cvssVector;

    @Column("cwe")
    private String cwe;

    @Column("cve")
    private String cve;

    @Column("reference_url")
    private String referenceUrl;

    @Column("external_references_url")
    private String[] externalReferenceUrl;

    @Setter
    @Transient
    @Builder.Default
    private boolean isNew = true;

    @Override
    @Id
    public MavenVulnerabilityDetailPrimaryKey getId() {
        return this.getPrimaryKey();
    }

    public MavenVulnerabilityDetailDto toDto() {
        return MavenVulnerabilityDetailDto.builder()
                                            .packageUrl(this.primaryKey.getComponentPackageUrl())
                                            .id(this.primaryKey.getId())
                                            .displayName(this.displayName)
                                            .title(this.title)
                                            .description(this.descripton)
                                            .cvssScore(this.cvssScore)
                                            .cvssVector(this.cvssVector)
                                            .cwe(this.cwe)
                                            .cve(this.cve)
                                            .referenceUrl(this.referenceUrl)
                                            .externalReferencesUrl(this.externalReferenceUrl)
                                            .build();
    }
}
