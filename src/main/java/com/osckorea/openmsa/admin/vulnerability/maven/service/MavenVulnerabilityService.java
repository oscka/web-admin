package com.osckorea.openmsa.admin.vulnerability.maven.service;

import org.springframework.stereotype.Service;
import com.osckorea.openmsa.admin.vulnerability.maven.domain.MavenVulnerabilityDetail;
import com.osckorea.openmsa.admin.vulnerability.maven.domain.MavenVulnerabilityDetailPrimaryKey;
import com.osckorea.openmsa.admin.vulnerability.maven.domain.MavenVulnerabilityHeader;
import com.osckorea.openmsa.admin.vulnerability.maven.dto.MavenVulnerabilityDetailDto;
import com.osckorea.openmsa.admin.vulnerability.maven.dto.MavenVulnerabilityHeaderDto;
import com.osckorea.openmsa.admin.vulnerability.maven.repository.MavenVulnerabilityDetailRepository;
import com.osckorea.openmsa.admin.vulnerability.maven.repository.MavenVulnerabilityHeaderRepository;
import com.osckorea.openmsa.global.exception.Exception400;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MavenVulnerabilityService {
    private final MavenVulnerabilityHeaderRepository mavenVulnerabilityHeaderRepository;
    private final MavenVulnerabilityDetailRepository mavenVulnerabilityDetailRepository;

    public MavenVulnerabilityHeaderDto[] getAllMavenVulnerabilityReportHeader() {
        return this.mavenVulnerabilityHeaderRepository.findAll().stream().map(entity -> entity.toDto()).toArray(MavenVulnerabilityHeaderDto[]::new);
    }

    public MavenVulnerabilityDetailDto[] getAllMavenVulnerabilityReportDetail() {
        return this.mavenVulnerabilityDetailRepository.findAll().stream().map(entity -> entity.toDto()).toArray(MavenVulnerabilityDetailDto[]::new);
    }

    public MavenVulnerabilityHeaderDto getMavenVulnerabilityReportHeader(String componentPackageUrl) {
        MavenVulnerabilityHeader entity = this.mavenVulnerabilityHeaderRepository.findById(componentPackageUrl).orElse(null);

        if (entity != null) {
            return entity.toDto();
        } else {
            throw new Exception400(componentPackageUrl, "Not Found Vulnerability Report Header");
        }
    }

    public MavenVulnerabilityDetailDto getMavenVulnerabilityReportDetail(String componentPackageUrl, String vulnerabilityReportId) {
        MavenVulnerabilityDetailPrimaryKey primaryKey = MavenVulnerabilityDetailPrimaryKey.builder().componentPackageUrl(componentPackageUrl).id(vulnerabilityReportId).build();
        
        MavenVulnerabilityDetail entity = this.mavenVulnerabilityDetailRepository.findByPrimaryKey(primaryKey).orElse(null);

        if (entity != null) {
            return entity.toDto();
        } else {
            throw new Exception400(componentPackageUrl + " & "  + vulnerabilityReportId, "Not Found Vulnerability Detail Report");
        }
    }

    public void deleteMavenVulnerabilityReportHeader(String componentPackageUrl) {
        this.mavenVulnerabilityHeaderRepository.deleteById(componentPackageUrl);
    }

    public void deleteMavenVulnerabilityReportDetail(String componentPackageUrl, String vulnerabilityReportId) {
        MavenVulnerabilityDetailPrimaryKey primaryKey = MavenVulnerabilityDetailPrimaryKey.builder().componentPackageUrl(componentPackageUrl).id(vulnerabilityReportId).build();

        this.mavenVulnerabilityDetailRepository.deleteById(primaryKey);
    }
}
