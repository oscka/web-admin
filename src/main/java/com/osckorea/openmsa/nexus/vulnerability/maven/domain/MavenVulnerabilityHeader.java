package com.osckorea.openmsa.nexus.vulnerability.maven.domain;

import java.sql.Timestamp;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.ReadOnlyProperty;
import org.springframework.data.annotation.Transient;
import org.springframework.data.domain.Persistable;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;
import com.osckorea.openmsa.nexus.vulnerability.maven.dto.MavenVulnerabilityHeaderDto;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
@Table("maven2_vulnerability_header")
public class MavenVulnerabilityHeader implements Persistable<String>{
    @Id
    @Column("component_package_url")
    private String componentPackageUrl;

    @Column("component_description")
    private String componentDescription;

    @Column("component_reference_url")
    private String componentReferenceUrl;

    @Column("vulnerability_critical_count")
    private Integer vulnerabilityCriticalCount;

    @Column("vulnerability_severe_count")
    private Integer vulnerabilitySevereCount;

    @Column("vulnerability_moderate_count")
    private Integer vulnerabilityModerateCount;

    @Column("last_modified_date")
    @ReadOnlyProperty
    private Timestamp lastModifiedDate;

    @Setter
    @Transient
    @Builder.Default
    private boolean isNew = true;

    @Override
    public String getId() {
        return this.componentPackageUrl;
    }

    public MavenVulnerabilityHeaderDto toDto() {
        return MavenVulnerabilityHeaderDto.builder()
                                            .packageUrl(this.componentPackageUrl)
                                            .description(this.componentDescription)
                                            .referenceUrl(this.componentReferenceUrl)
                                            .criticalCount(this.vulnerabilityCriticalCount)
                                            .severeCount(this.vulnerabilitySevereCount)
                                            .moderateCount(this.vulnerabilityModerateCount)
                                            .lastModifiedDate(this.lastModifiedDate)
                                            .build();
    }
}
